//! http://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%2069
//!
//! オイラーのトーティエント関数, φ(n) [時々ファイ関数とも呼ばれる]は, n と互いに素な n 未満の数の数を定める. たとえば, 1, 2, 4, 5, 7, そして8はみな9未満で9と互いに素であり, φ(9)=6.
//!
//! n	互いに素な数	φ(n)	n/φ(n)
//! 2	1	1	2
//! 3	1,2	2	1.5
//! 4	1,3	2	2
//! 5	1,2,3,4	4	1.25
//! 6	1,5	2	3
//! 7	1,2,3,4,5,6	6	1.1666...
//! 8	1,3,5,7	4	2
//! 9	1,2,4,5,7,8	6	1.5
//! 10	1,3,7,9	4	2.5
//! n ≤ 10 では n/φ(n) の最大値は n=6 であることがわかる.
//!
//! n ≤ 1,000,000で n/φ(n) が最大となる値を見つけよ.

// https://ja.wikipedia.org/wiki/%E3%82%AA%E3%82%A4%E3%83%A9%E3%83%BC%E3%81%AE%CF%86%E9%96%A2%E6%95%B0

// φ(n) = n \prod_{k=1}^d (1 - \frac{1}{p_k})
// n/φ(n) = \prod_{k=1}^d (1 + \frac{1}{p_k - 1})
// \frac{1}{p_k - 1}は単調減少なので、 1 < \frac{1}{p_{k+1} - 1} < \frac{1}{p_k - 1}
// よって求めるべき最大値は、素因数分解の結果が2から順に指数1の素数が並ぶ値。

use euler_lib::Prime;

fn main() {
    let n = Prime::<usize>::new()
        .iter()
        .scan(1, |acc, p| {
            *acc = *acc * p;
            Some(*acc)
        })
        .take_while(|&n| n < 1_000_000)
        .last()
        .unwrap();

    println!("{}", n);
}
