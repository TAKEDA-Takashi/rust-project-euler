//! http://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%20121
//!
//! 袋の中に赤い円盤 1 枚と青い円盤 1 枚が入っている. ある賭けゲームにおいて, プレイヤーは円盤を 1 枚ランダムに取り出しその色を記録する. 各ターンの終わりに円盤は袋に戻され, 追加の赤い円盤 1 枚が袋に足され, そして次の円盤がランダムに取り出される.
//!
//! プレイヤーはゲームをプレイするのに 1 ポンドを支払い, ゲーム終了時に青い円盤を赤い円盤より多く取り出していれば勝利する.
//!
//! ゲームが 4 ターンプレイされたとすると, プレイヤーが勝利する確率はちょうど 11/120 となる. したがって, 胴元が赤字の見込みになるまでにこのゲームで勝ち//! に対して割り当てるべき賞金の最大は 10 ポンドとなるであろう. 支払いはすべてポンドの整数倍であり, またゲームをプレイするのに支払われたもともとの 1 ポンドを含んでいるため, 与えられた例では実際にはプレイヤーは 9 ポンドを獲得することに注意しよう.
//!
//! 15 ターンがプレイされるゲーム 1 回に割り当てられるべき賞金の最大を求めよ.

// 勝率をp、賞金をxとすると p * x < 1 が黒字の条件。
// x < 1 / p なので、求めるべき賞金の最大は trunc(1 / p)

use euler_lib::factorial;
use itertools::Itertools;

fn main() {
    let t = 15;

    let s = (1..=(t - 1) / 2)
        .map(|r| {
            (1..=t)
                .combinations(r)
                .map(|v| v.iter().product::<usize>())
                .sum::<usize>()
        })
        .sum::<usize>();

    println!(
        "{}",
        ((factorial(&(t + 1)) as f64) / (1 + s) as f64).trunc()
    );
}
